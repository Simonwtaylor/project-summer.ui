[{"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/index.tsx":"1","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/serviceWorker.ts":"2","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/store.ts":"3","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/App.tsx":"4","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/root-reducer.ts":"5","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/root-sagas.ts":"6","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/index.ts":"7","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/pages/index.ts":"8","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/firebase/firebase.utils.ts":"9","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/index.ts":"10","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.reducer.ts":"11","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.sagas.ts":"12","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/index.ts":"13","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/index.ts":"14","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/enums/index.ts":"15","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/sprint.reducer.tsx":"16","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dashboard/index.ts":"17","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/navbar/index.ts":"18","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/board/index.ts":"19","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/comments/index.ts":"20","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sprint/index.ts":"21","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sidebar/index.ts":"22","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sign-in/index.ts":"23","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/activity/index.ts":"24","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/index.ts":"25","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/index.ts":"26","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/pages/sprint.tsx":"27","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/pages/login.tsx":"28","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/pages/home.tsx":"29","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/sprint.types.ts":"30","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/sprint.action.ts":"31","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/sprint.selector.ts":"32","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.types.ts":"33","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.selector.ts":"34","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/enums/sprint.enums.ts":"35","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.action.ts":"36","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/enums/router.enums.tsx":"37","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-card.component.tsx":"38","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-modal.container.tsx":"39","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/user-dropdown.container.tsx":"40","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-list.component.tsx":"41","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/sprint-dropdown.container.tsx":"42","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-modal.component.tsx":"43","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/custom-dropdown.component.tsx":"44","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/current-task-dropdown.container.tsx":"45","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/activity/activity-list.component.tsx":"46","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sign-in/sign-in.component.tsx":"47","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sprint/sprint-selector.component.tsx":"48","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sprint/sprint-board.component.tsx":"49","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sidebar/nav-sidebar.component.tsx":"50","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sprint/add-sprint.component.tsx":"51","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/comments/comments.component.tsx":"52","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/board/board-column.component.tsx":"53","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dashboard/user-dashboard.container.tsx":"54","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/navbar/navbar.component.tsx":"55","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/index.ts":"56","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/services/index.ts":"57","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/index.ts":"58","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/user.type.ts":"59","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/task.type.ts":"60","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/comment.type.ts":"61","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/board.type.ts":"62","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/sprint.type.ts":"63","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/activity.type.ts":"64","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/services/date.service.tsx":"65","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-list-row.container.tsx":"66","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-list-row.component.tsx":"67"},{"size":846,"mtime":1610628838137,"results":"68","hashOfConfig":"69"},{"size":5295,"mtime":1610607347225,"results":"70","hashOfConfig":"69"},{"size":597,"mtime":1610607347224,"results":"71","hashOfConfig":"69"},{"size":5969,"mtime":1610609152633,"results":"72","hashOfConfig":"69"},{"size":228,"mtime":1610607347223,"results":"73","hashOfConfig":"69"},{"size":175,"mtime":1610607347223,"results":"74","hashOfConfig":"69"},{"size":149,"mtime":1610607347223,"results":"75","hashOfConfig":"69"},{"size":144,"mtime":1610607347222,"results":"76","hashOfConfig":"69"},{"size":2057,"mtime":1610607347220,"results":"77","hashOfConfig":"69"},{"size":329,"mtime":1610607347217,"results":"78","hashOfConfig":"69"},{"size":672,"mtime":1610607347224,"results":"79","hashOfConfig":"69"},{"size":1847,"mtime":1610607347224,"results":"80","hashOfConfig":"69"},{"size":156,"mtime":1610607347224,"results":"81","hashOfConfig":"69"},{"size":134,"mtime":1610607347223,"results":"82","hashOfConfig":"69"},{"size":63,"mtime":1610607347220,"results":"83","hashOfConfig":"69"},{"size":394,"mtime":1610607347223,"results":"84","hashOfConfig":"69"},{"size":80,"mtime":1610607347216,"results":"85","hashOfConfig":"69"},{"size":55,"mtime":1610607347217,"results":"86","hashOfConfig":"69"},{"size":109,"mtime":1610607347215,"results":"87","hashOfConfig":"69"},{"size":98,"mtime":1610607347215,"results":"88","hashOfConfig":"69"},{"size":203,"mtime":1610607347219,"results":"89","hashOfConfig":"69"},{"size":106,"mtime":1610607347218,"results":"90","hashOfConfig":"69"},{"size":57,"mtime":1610607347218,"results":"91","hashOfConfig":"69"},{"size":112,"mtime":1610607347215,"results":"92","hashOfConfig":"69"},{"size":317,"mtime":1610607347216,"results":"93","hashOfConfig":"69"},{"size":257,"mtime":1610607347219,"results":"94","hashOfConfig":"69"},{"size":1018,"mtime":1610651247856,"results":"95","hashOfConfig":"69"},{"size":701,"mtime":1611000963819,"results":"96","hashOfConfig":"69"},{"size":543,"mtime":1610607347222,"results":"97","hashOfConfig":"69"},{"size":81,"mtime":1610607347223,"results":"98","hashOfConfig":"69"},{"size":173,"mtime":1610607347223,"results":"99","hashOfConfig":"69"},{"size":227,"mtime":1610607347223,"results":"100","hashOfConfig":"69"},{"size":370,"mtime":1610607347224,"results":"101","hashOfConfig":"69"},{"size":214,"mtime":1610607347224,"results":"102","hashOfConfig":"69"},{"size":104,"mtime":1610607347221,"results":"103","hashOfConfig":"69"},{"size":844,"mtime":1610607347224,"results":"104","hashOfConfig":"69"},{"size":177,"mtime":1610607347220,"results":"105","hashOfConfig":"69"},{"size":3028,"mtime":1610657634277,"results":"106","hashOfConfig":"69"},{"size":3194,"mtime":1610607347220,"results":"107","hashOfConfig":"69"},{"size":1095,"mtime":1610607347217,"results":"108","hashOfConfig":"69"},{"size":1134,"mtime":1610699859967,"results":"109","hashOfConfig":"69"},{"size":1145,"mtime":1611001094220,"results":"110","hashOfConfig":"69"},{"size":9754,"mtime":1611003258551,"results":"111","hashOfConfig":"69"},{"size":830,"mtime":1610607347216,"results":"112","hashOfConfig":"69"},{"size":1229,"mtime":1610607347216,"results":"113","hashOfConfig":"69"},{"size":1600,"mtime":1611003967074,"results":"114","hashOfConfig":"69"},{"size":1018,"mtime":1610607347218,"results":"115","hashOfConfig":"69"},{"size":1052,"mtime":1610607347219,"results":"116","hashOfConfig":"69"},{"size":4970,"mtime":1610624453649,"results":"117","hashOfConfig":"69"},{"size":7866,"mtime":1610955924450,"results":"118","hashOfConfig":"69"},{"size":3400,"mtime":1610607347218,"results":"119","hashOfConfig":"69"},{"size":1697,"mtime":1611003317270,"results":"120","hashOfConfig":"69"},{"size":2924,"mtime":1610626799643,"results":"121","hashOfConfig":"69"},{"size":4648,"mtime":1610954655379,"results":"122","hashOfConfig":"69"},{"size":1594,"mtime":1610617938058,"results":"123","hashOfConfig":"69"},{"size":95,"mtime":1610607347221,"results":"124","hashOfConfig":"69"},{"size":31,"mtime":1610607347221,"results":"125","hashOfConfig":"69"},{"size":183,"mtime":1610607347221,"results":"126","hashOfConfig":"69"},{"size":222,"mtime":1610607347222,"results":"127","hashOfConfig":"69"},{"size":505,"mtime":1610607347222,"results":"128","hashOfConfig":"69"},{"size":199,"mtime":1610607347221,"results":"129","hashOfConfig":"69"},{"size":274,"mtime":1610607347221,"results":"130","hashOfConfig":"69"},{"size":372,"mtime":1610607347222,"results":"131","hashOfConfig":"69"},{"size":238,"mtime":1610607347221,"results":"132","hashOfConfig":"69"},{"size":583,"mtime":1610607347221,"results":"133","hashOfConfig":"69"},{"size":1079,"mtime":1610699894866,"results":"134","hashOfConfig":"69"},{"size":1995,"mtime":1610955304168,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"7rsfmp",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"138"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"138"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"138"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"138"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"138"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/index.tsx",[],["276","277"],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/serviceWorker.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/store.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/App.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/root-reducer.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/root-sagas.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/pages/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/firebase/firebase.utils.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.reducer.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.sagas.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/enums/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/sprint.reducer.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dashboard/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/navbar/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/board/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/comments/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sprint/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sidebar/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sign-in/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/activity/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/pages/sprint.tsx",["278"],"import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectCurrentSprint } from '../redux/index';\nimport { Grid } from 'semantic-ui-react';\nimport { SprintBoard } from '../components/sprint';\nimport { ROUTER_ENUMS } from '../lib/enums';\nimport { ITask } from '../lib';\n\nexport interface ISprintPageProps {\n  socket?: SocketIOClient.Socket;\n  sprintState: ROUTER_ENUMS;\n}\n\nconst SprintPage: React.FC<ISprintPageProps> = ({\n  socket,\n  sprintState,\n}) => {\n\n  const currentSprint = useSelector(selectCurrentSprint);\n  \n  if (!currentSprint) {\n    return (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column>\n            <h3\n              style={{ textAlign: 'center', margin: '30px' }}\n            >\n              Please select a sprint\n            </h3>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n\n  return (\n    <SprintBoard\n      socket={socket}\n      sprintId={currentSprint.id}\n      sprintState={sprintState}\n    />\n  );\n}\n \nexport default SprintPage;\n","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/pages/login.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/pages/home.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/sprint.types.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/sprint.action.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/sprint/sprint.selector.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.types.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.selector.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/enums/sprint.enums.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/redux/user/user.action.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/enums/router.enums.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-card.component.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-modal.container.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/user-dropdown.container.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-list.component.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/sprint-dropdown.container.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-modal.component.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/custom-dropdown.component.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dropdowns/current-task-dropdown.container.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/activity/activity-list.component.tsx",["279"],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sign-in/sign-in.component.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sprint/sprint-selector.component.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sprint/sprint-board.component.tsx",["280","281","282","283"],"import * as React from 'react';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { useSelector } from 'react-redux';\nimport { Grid, Label, Icon } from 'semantic-ui-react';\nimport { BoardColumn } from '../board';\nimport { ISprint, IBoard, ITask, ROUTER_ENUMS, DateService } from '../../lib';\nimport Comments from '../comments/comments.component';\nimport { useParams } from 'react-router-dom';\nimport { TaskModalContainer } from '../task';\nimport { selectCurrentUser, selectCurrentSprint } from '../../redux/index';\nimport ActivityList from '../activity/activity-list.component';\n\nconst { SPRINT, SPRINT_ACTIVITY, SPRINT_CHAT, SPRINT_STATS } = ROUTER_ENUMS;\n\nexport interface SprintBoardProps {\n  sprintId: number;\n  socket?: SocketIOClient.Socket;\n  sprintState: ROUTER_ENUMS;\n}\n \nconst SprintBoard: React.FC<SprintBoardProps> = ({\n  sprintId,\n  socket,\n  sprintState,\n}) => {\n  const [boards, setBoards] = React.useState<IBoard[]>([]);\n\n  const { id } = useParams<any>();\n  const currentSprint: ISprint = useSelector(selectCurrentSprint);\n  const currentUser = useSelector(selectCurrentUser);\n\n  React.useEffect(() => {\n    if (socket) {\n      socket.emit('getSprint', { id: sprintId });\n    }\n  }, [socket, sprintId])\n\n  React.useEffect(() => {\n    socket?.on('sprint', (sprint: ISprint) => {\n      setBoards(sprint.boards);\n    });\n  }, [socket]);\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination, draggableId } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      // TODO: Add reordering\n      return;\n    } else {\n      \n      const boardsToEdit = [...boards];\n      const board = boardsToEdit\n        .find(\n          a => a.id === +source.droppableId\n        );\n\n      const taskToAdd = board?.tasks.find(a => a.id === draggableId);\n      \n      const removeFrom = board?.tasks\n        .findIndex(\n          a => a.id === draggableId,\n        );\n\n      if (removeFrom) {\n        boardsToEdit.find(\n          a => a.id === +source.droppableId\n        )?.tasks\n        .splice(\n          removeFrom, 1\n        );\n      }\n\n      if (taskToAdd) {\n        boardsToEdit.find(a => a.id === +destination.droppableId)?.tasks.push(taskToAdd);\n      }\n\n      socket?.emit(\n        'updateTaskBoardBySprint',\n        {\n          sprintId: sprintId,\n          taskId: draggableId,\n          boardId: destination.droppableId,\n        },\n      );\n    }\n  };\n\n  const handleAddNewTask = (\n    title: string,\n    boardId: number,\n  ) => {\n    socket?.emit('addTask', { sprintId, newTask: { title, boardId: `${boardId}`} });\n  };\n\n  const getBoardContent = () => {\n    if (!boards) {\n      return (<h1>Please select a sprint</h1>);\n    }\n\n    boards.sort((a,b) => { return a.order-b.order});\n\n    return boards.map(({ tasks: boardTasks, name, id }: IBoard) => {\n      return (\n        <BoardColumn\n          name={name}\n          items={boardTasks}\n          droppableId={`${id}`}\n          key={`boardid${id}`}\n          onAddNewTask={handleAddNewTask}\n        />\n      )\n    }) \n  };\n\n  const handleTaskModalClose = () => {\n    socket?.emit('getSprint', { id: sprintId });\n  };\n\n  const getModal = () => {\n    if (id) {\n      return (\n        <TaskModalContainer\n          id={+id}\n          socket={socket}\n          onClose={handleTaskModalClose}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const handleCommentSubmit = (content: string) => {\n    socket?.emit('addCommentToSprint', { sprintId, content, uid: currentUser.uid });\n  };\n\n  const renderContent = () => {\n    const activities: any[] = [];\n\n    currentSprint.boards.forEach((board) => {\n      board.tasks.forEach((task) => {\n        task.activities.forEach((activity) => activities.push({\n          ...activity,\n          taskName: task.title,\n          taskId: +task.id,\n        }));\n      });\n    });\n\n    switch(sprintState) {\n      case SPRINT_ACTIVITY:\n        return(\n          <ActivityList\n            activities={activities}\n            colourClass={'white'}\n          />\n        );\n      case SPRINT_CHAT:\n        return(\n          <Comments\n            colourClass={'white'}\n            comments={currentSprint.comments}\n            onCommentSubmit={handleCommentSubmit}\n          />\n        );\n      case SPRINT_STATS:\n        return(\n          <>\n            Stats\n          </>\n        );\n      case SPRINT:\n      default:\n        return (\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Grid\n              style={{ padding: '15px' }}\n            >\n              {getModal()}\n              <Grid.Row columns={4}>\n                {getBoardContent()}\n              </Grid.Row>\n            </Grid>\n          </DragDropContext>\n        );\n    }\n  };\n\n  return (\n    <div \n      style={{\n        marginLeft: '10px',\n        marginRight: '10px',\n      }}\n    >\n      {renderContent()}\n    </div>\n  );\n};\n \nexport default SprintBoard;\n","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sidebar/nav-sidebar.component.tsx",["284","285","286"],"import * as React from 'react';\nimport { Sidebar, Menu, Icon, Popup, Button, Label } from 'semantic-ui-react';\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { SprintSelector } from '../sprint/index';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectCurrentSprint, selectCurrentUser } from '../../redux/index';\nimport AddSprint from '../sprint/add-sprint.component';\n\nimport { ISprint, IBoard, ITask, ROUTER_ENUMS, DateService } from '../../lib';\n\nconst { SPRINT, SPRINT_ACTIVITY, SPRINT_CHAT } = ROUTER_ENUMS;\n\nexport interface INavSidebarProps extends RouteComponentProps<any> {\n  socket?: SocketIOClient.Socket;\n  visible: boolean;\n  onSprintChange: (prevSprintId: number) => void;\n  onSprintSectionChange: (sprintSection: ROUTER_ENUMS) => void;\n}\n \nconst NavSidebar: React.FC<INavSidebarProps> = ({\n  socket,\n  visible,\n  onSprintChange,\n  onSprintSectionChange,\n  history,\n}) => {\n\n  const currentSprint = useSelector(selectCurrentSprint);\n  const currentUser = useSelector(selectCurrentUser);\n\n  const [addSprint, setAddSprint] = React.useState(false);\n\n  React.useEffect(() => {\n    socket?.on('newUserTaskAdded', (task: ITask) => {\n      history.push(`sprint/${task.id}`);\n    });\n  }, [socket]);\n\n  const handleAddSprint = (sprint: any) => {\n    socket?.emit('addSprint', { \n      ...sprint,\n    });\n  };\n\n  const getSprintSection = () => {\n    if (currentSprint) {\n      return (\n        <></>\n      );\n    }\n\n    return (\n      <Menu.Item>\n        <SprintSelector\n          socket={socket}\n        />\n      </Menu.Item>\n    )\n  };\n\n  const handleAddNewTaskClick = () => {\n    socket?.emit('addSkeletonTask', {\n      sprintId: currentSprint.id,\n      boardId: currentSprint.boards.find((a: any) => a.name === \"Backlog\").id,\n    });\n    onSprintSectionChange(SPRINT);\n  };\n\n  const getDaysLeft = () => {\n    if (currentSprint?.endDate) {\n      const { endDate } = currentSprint;\n      const a = new Date();\n      const b = new Date(endDate);\n      const difference = DateService.getDaysDifference(a, b);\n\n      return (\n        <Popup\n          content={`${difference} days left in sprint`}\n          key={`dayssleftsprinticon`}\n          trigger={\n          <Label as='a' color='blue' icon={true}>\n            <Icon name={'calendar check'} />\n            {difference}\n          </Label>\n          }\n        />\n      );\n    }\n\n    return <></>;\n  };\n\n  const calculatePoints = () => {\n    if (!currentSprint) {\n      return <></>;\n    }\n\n    let points = 0;\n\n    currentSprint?.boards.forEach((board: IBoard) => {\n      board.tasks\n        .filter(a => !a.completed)\n        .forEach((task: ITask) => points += task.storyPoints || 0);\n    });\n\n    return (\n      <Popup\n        content={`${points} Points left in sprint`}\n        key={`pointsleftsprinticon`}\n        trigger={\n          <Label as='a' color='teal' icon={true}>\n            <Icon name={'gamepad'} />\n            {points}\n          </Label>\n        }\n      />\n    );\n  };\n\n  const getSprintHeader = () => {\n    if (currentSprint) {\n      return (\n        <div\n          style={{\n            display: 'flex',\n            marginTop: '10px',\n          }}\n        >\n          <div\n            style={{\n              textAlign: 'left',\n              width: '75%',\n            }}\n          >\n            <span\n              style={{\n                marginLeft: '10px',\n                fontSize: '1rem'\n              }}\n            >\n              🚀\n            </span>\n            <span\n              style={{\n                marginLeft: '5px',\n                fontSize: '1rem'\n              }}\n            >\n              <b>{currentSprint.name}</b>\n            </span>\n          </div>\n          <div\n            style={{\n              textAlign: 'right',\n              width: '25%'\n            }}\n          >\n            <Popup\n              content={'Change Sprint'}\n              key={`changesprinticon`}\n              trigger={\n                <Icon\n                  name={'exchange'}\n                  style={{ \n                    fontSize: '1em',\n                    marginRight: '10px',\n                    cursor: 'pointer'\n                  }}\n                  onClick={() => onSprintChange(currentSprint.id)}\n                />\n              }\n            />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div style={{ marginTop: '10px' }}>\n        <span style={{ fontSize: '1rem' }}>Sprint</span>\n      </div>\n    );\n  };\n\n  const getSprintOptions = () => {\n    if (!currentSprint) {\n      return <></>;\n    }\n\n    return (\n      <>\n        <Menu.Item\n          as={Link}\n          to={'/sprint'}\n          \n          onClick={() => onSprintSectionChange(SPRINT)}\n          style={{\n            fontSize: '1rem',\n          }}\n        >\n          <Icon\n            style={{ fontSize: '1em'}}\n            name='columns'\n            size={'small'}\n          />\n          Boards\n        </Menu.Item>\n        <Menu.Item\n          as={Link}\n          to={'/sprint'}\n          onClick={() => onSprintSectionChange(SPRINT_ACTIVITY)}\n          style={{\n            fontSize: '1rem',\n          }}\n        >\n          <Icon\n            style={{ fontSize: '1em'}}\n            name='history'\n            size={'small'}\n          />\n          Activity\n        </Menu.Item>\n        <Menu.Item\n          as={Link}\n          to={'/sprint'}\n          onClick={() => onSprintSectionChange(SPRINT_CHAT)}\n          style={{\n            fontSize: '1rem',\n          }}\n        >\n          <Icon\n            style={{ fontSize: '1em'}}\n            name='chat'\n            size={'small'}\n          />\n          Chat\n        </Menu.Item>\n      </>\n    );\n  };\n\n  const getAddSprintTaskButton = () => {\n    if (currentSprint) {\n      return (\n        <Button\n          size={'small'}\n          onClick={handleAddNewTaskClick}\n          color={'green'}\n          inverted={true}\n          content={\n            <>\n              <span>🎫 Add Task</span>\n            </>\n          }\n        />\n      );\n    }\n\n    return (\n      <Button\n        size={'small'}\n        onClick={() => setAddSprint(!addSprint)}\n        color={'green'}\n        inverted={true}\n        content={\n          <>\n            <span>📈 Add Sprint</span>\n          </>\n        }\n      />\n    );\n  };\n\n  const getRender = () => {\n    if (!currentUser) {\n      return <></>\n    }\n\n    return (\n      <>\n        <Menu.Header\n          style={{\n            color: 'white',\n            borderBottom: '1px solid rgba(255,255,255, 0.1',\n            borderTop: '1px solid rgba(255,255,255, 0.1',\n            paddingBottom: '5px',\n            maxHeight: '50px',\n            minHeight: '50px',\n          }}\n        >\n          {getSprintHeader()}\n        </Menu.Header>\n          {getSprintSection()}\n          {getSprintOptions()}\n        <Menu.Item>\n          <div>\n            {getDaysLeft()}\n            {calculatePoints()}\n          </div>\n        </Menu.Item>\n        <Menu.Item>\n          {getAddSprintTaskButton()}\n        </Menu.Item>\n      </>\n    )\n  };\n\n  // const getModal = () => {\n  //   if (id) {\n  //     return (\n  //       <TaskModalContainer\n  //         id={+id}\n  //         socket={socket}\n  //         onClose={handleTaskModalClose}\n  //       />\n  //     );\n  //   }\n  //   return <></>;\n  // };\n\n  const getAddSprint = () => {\n    return(\n      <AddSprint\n        show={addSprint}\n        onModalClose={() => setAddSprint(false)}\n        onAddSprint={handleAddSprint}\n      />\n    );\n  };\n\n  return (\n    <Sidebar\n      as={Menu}\n      animation='push'\n      icon='labeled'\n      inverted\n      vertical\n      visible={visible}\n      width='thin'\n      style={{\n        width: 'inherit',\n        backgroundColor: '#2f3136'\n      }}\n    >\n      {getRender()}\n      {getAddSprint()}\n    </Sidebar>\n  );\n}\n\nexport default withRouter(NavSidebar);","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/sprint/add-sprint.component.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/comments/comments.component.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/board/board-column.component.tsx",["287","288"],"import * as React from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { ITask } from '../../lib';\nimport { Grid, Input } from 'semantic-ui-react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport TaskCard from '../task/task-card.component'\n\nexport interface IBoardColumnProps extends RouteComponentProps {\n  name: string;\n  droppableId: string;\n  items: ITask[];\n  onAddNewTask: (title: string, boardId: number) => void;\n}\n\nconst BoardColumn: React.FC<IBoardColumnProps> = ({\n  name,\n  droppableId,\n  items,\n  onAddNewTask,\n  history,\n}) => {\n\n  const [newTask, setNewTask] = React.useState<boolean>(false);\n  const [newTaskTitle, setNewTaskTitle] = React.useState<string>('');\n  \n  const getListStyle = (isDraggingOver: boolean) => ({\n    background: isDraggingOver ? 'lightblue' : 'none',\n    border: isDraggingOver ? '1px dotted grey' : '',\n    padding: 8,\n    width: 300,\n    maxHeight: '75vh',\n  });\n\n  const getNewTaskInput = () => {\n    if (newTask) {\n      return (\n        <Input\n          value={newTaskTitle}\n          onChange={\n            (e: React.ChangeEvent<HTMLInputElement>) => setNewTaskTitle(e.target.value)\n          }\n        />\n      )\n    }\n\n    return <></>;\n  };\n  \n  const getEmoji = (name: string) => {\n    const styles = {\n      marginRight: '7px',\n      fontSize: '1.2rem',\n    };\n\n    switch (name) {\n      case \"Backlog\":\n        return <span style={styles}>🗃</span>;\n      case \"In Progress\":\n        return <span style={styles}>🔥</span>;\n      case \"Completed\":\n        return <span style={styles}>🎉</span>;\n    }\n  };\n\n  const onSaveClick = () => {\n    onAddNewTask(newTaskTitle, +droppableId);\n    setNewTaskTitle('');\n    setNewTask(false);\n  };\n  \n  const onCancelClick = () => {\n    setNewTaskTitle('');\n    setNewTask(false);\n  }\n\n  const getColumnActions = () => {\n  };\n\n  return (\n    <Grid.Column key={`sprintboard${droppableId}`}>\n      <div\n        style={{\n          marginTop: '5px',\n          marginBottom: '10px',\n        }}\n      >\n        <span\n          style={{\n            paddingLeft: '8px',\n            fontSize: '1.3em',\n          }}\n        >\n          {getEmoji(name)}\n          <b>{name}</b>\n        </span>\n        {getColumnActions()}\n      </div>\n      {getNewTaskInput()}\n      <Droppable droppableId={droppableId}>\n        {(provided: any, snapshot: any) => (\n          <div\n            ref={provided.innerRef}\n            className={'board col draggable'}\n            style={getListStyle(snapshot.isDraggingOver)}>\n            {items.map((item: ITask, index: any) => (\n              <TaskCard\n                task={item}\n                index={index}\n                onCardClick={() => history.push(`/sprint/${item.id}`)}\n              />\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </Grid.Column>\n  );\n}\n\nexport default withRouter(BoardColumn);\n","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/dashboard/user-dashboard.container.tsx",["289"],"import * as React from 'react';\nimport { ITask } from '../../lib';\nimport { TaskList, TaskModalContainer } from '../task';\nimport { useSelector } from 'react-redux';\nimport { selectCurrentUser } from '../../redux/index';\nimport CurrentTaskDropdown from '../dropdowns/current-task-dropdown.container';\nimport { Grid, Icon, Label, Image } from 'semantic-ui-react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nexport interface IUserDashboardContainerProps extends RouteComponentProps<any>  {\n  socket?: SocketIOClient.Socket;\n}\n \nconst UserDashboardContainer: React.FC<IUserDashboardContainerProps> = ({\n  socket,\n  history,\n}) => {\n  const currentUser = useSelector(selectCurrentUser);\n  const [userTasks, setUserTasks] = React.useState<any[]>([]);\n  const [loaded, setLoaded] = React.useState(false);\n  const [showTaskModal, setShowTaskModal] = React.useState(false);\n  const handleCurrentTask = (task: any) => {\n    socket?.emit('updateUserAssignedTask', { \n      userId: currentUser.id,\n      taskId: task.value,\n    });\n  };\n\n  React.useEffect(() => {\n    if (socket && currentUser?.roomJoined) {\n      socket.emit('joinUserDashboardRoom');\n      socket.emit('getUserDashboard');\n      socket.on('userDashboard', ({ tasks }: { tasks: ITask[] }) => {\n        console.log(tasks);\n        setUserTasks(tasks);\n        setLoaded(true);\n      });\n    }\n    return () => {\n      socket?.emit('exitUserDashboardRoom')\n    }\n  }, [socket, showTaskModal, currentUser]);\n\n  const getUserProfile = () => {\n    if (!currentUser) {\n      return <></>;\n    }\n\n    return (\n      <>\n        <Image\n          src={currentUser?.photoURL}\n          circular={true}\n          size={'tiny'}\n          style={{\n            width: '35px',\n            display: 'inline-block',\n            marginLeft: '7px',\n          }}\n        />\n      </>\n    );\n  };\n\n  const handleTaskModalClose = () => {\n    console.log(\"Do Something...\");\n    setShowTaskModal(false);\n  };\n\n  const setupTaskModal = () => {\n    setShowTaskModal(true);\n  };\n\n  const getTaskModal = (taskId?: number, sprintId?: number) => {\n    if (showTaskModal) {\n      return (\n        <TaskModalContainer\n          id={taskId || +currentUser?.currentTask.id}\n          socket={socket}\n          onClose={handleTaskModalClose}\n          locationOnClose={'/home'}\n          sprintId={sprintId || currentUser?.currentTask.sprintId}\n        />\n      );\n    }\n  };\n\n  const getCurrentTask = () => {\n    if (currentUser?.currentTask?.id) {\n      return (\n        <Label\n          as={'a'}\n          color='teal'\n          icon={true}\n          //onClick={() => dispatch(setCurrentUser({ ...currentUser, currentTask: null }))}\n          onClick={() => setupTaskModal()}\n          style={{\n            float: 'none',\n            width: '100%',\n            marginTop: '4px',\n          }}\n        >\n          <Icon name={'check circle outline'} />\n          {currentUser.currentTask.title}\n        </Label>\n      );\n    }\n\n    return (\n      <CurrentTaskDropdown\n        name={'taskId'}\n        placeholder={'🤔 What are you working on?'}\n        onSelectTask={handleCurrentTask}\n        socket={socket}\n        selectedTask={\n          (currentUser && Object.keys(currentUser?.currentTask).length > 0) ?\n          currentUser?.currentTask : undefined\n        }\n      />\n    );\n  };\n\n  const handleUserTaskClick = (taskId: number, sprintId: number) => {\n    setShowTaskModal(true);\n    history.push(`sprint/${taskId}`);\n  };\n\n  const getWidth = () => {\n    if (currentUser && currentUser?.currentTask?.id) {\n      return 2;\n    }\n    \n    return 4;\n  }\n\n  if (loaded) {\n    return (\n      <div className={'user dashboard'}>\n        <Grid>\n          <Grid.Row columns={2}>\n            <Grid.Column className={'title'} width={4}>\n              {getUserProfile()}\n              <span className={'greeting'}>Welcome {currentUser.displayName},</span>\n            </Grid.Column>\n            <Grid.Column width={getWidth()}>\n              {getCurrentTask()}\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={2}>\n            <Grid.Column>\n            </Grid.Column>\n            <Grid.Column>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={1}>\n            <Grid.Column className={'table'}>\n              <h3><span role=\"img\">🎯</span> Assigned Tasks</h3>\n              <TaskList tasks={userTasks} socket={socket} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        {getTaskModal()}\n      </div>\n    );\n  }\n\n  return (\n    <h3>Loading User Dashboard...</h3>\n  );\n}\n \nexport default withRouter(UserDashboardContainer);","/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/navbar/navbar.component.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/services/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/index.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/user.type.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/task.type.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/comment.type.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/board.type.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/sprint.type.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/types/activity.type.ts",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/lib/services/date.service.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-list-row.container.tsx",[],"/Users/simontaylor/git/personal/project-summer/project-summer.ui/src/components/task/task-list-row.component.tsx",[],{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","severity":1,"message":"295","line":7,"column":10,"nodeType":"296","messageId":"297","endLine":7,"endColumn":15},{"ruleId":"294","severity":1,"message":"298","line":4,"column":10,"nodeType":"296","messageId":"297","endLine":4,"endColumn":19},{"ruleId":"294","severity":1,"message":"299","line":4,"column":16,"nodeType":"296","messageId":"297","endLine":4,"endColumn":21},{"ruleId":"294","severity":1,"message":"300","line":4,"column":23,"nodeType":"296","messageId":"297","endLine":4,"endColumn":27},{"ruleId":"294","severity":1,"message":"295","line":6,"column":27,"nodeType":"296","messageId":"297","endLine":6,"endColumn":32},{"ruleId":"294","severity":1,"message":"301","line":6,"column":48,"nodeType":"296","messageId":"297","endLine":6,"endColumn":59},{"ruleId":"294","severity":1,"message":"302","line":5,"column":23,"nodeType":"296","messageId":"297","endLine":5,"endColumn":34},{"ruleId":"294","severity":1,"message":"303","line":9,"column":10,"nodeType":"296","messageId":"297","endLine":9,"endColumn":17},{"ruleId":"304","severity":1,"message":"305","line":37,"column":6,"nodeType":"306","endLine":37,"endColumn":14,"suggestions":"307"},{"ruleId":"294","severity":1,"message":"308","line":65,"column":9,"nodeType":"296","messageId":"297","endLine":65,"endColumn":20},{"ruleId":"294","severity":1,"message":"309","line":71,"column":9,"nodeType":"296","messageId":"297","endLine":71,"endColumn":22},{"ruleId":"294","severity":1,"message":"310","line":123,"column":9,"nodeType":"296","messageId":"297","endLine":123,"endColumn":28},"no-native-reassign",["311"],"no-negated-in-lhs",["312"],"@typescript-eslint/no-unused-vars","'ITask' is defined but never used.","Identifier","unusedVar","'IActivity' is defined but never used.","'Label' is defined but never used.","'Icon' is defined but never used.","'DateService' is defined but never used.","'useDispatch' is defined but never used.","'ISprint' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["313"],"'onSaveClick' is assigned a value but never used.","'onCancelClick' is assigned a value but never used.","'handleUserTaskClick' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"314","fix":"315"},"Update the dependencies array to be: [history, socket]",{"range":"316","text":"317"},[1250,1258],"[history, socket]"]